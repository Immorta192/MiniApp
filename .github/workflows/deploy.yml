name: Deploy Telegram Bot and GitHub Pages

on:
  push:
    branches:
      - main  # замените на нужную ветку

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
     contents: write  # Позволяет записывать в репозиторий


    steps:
      # 1. Проверка кода из репозитория
      - name: Checkout repository
        uses: actions/checkout@v3

      # Настройка аутентификации Git
      - name: Set up Git authentication
        run: git config --global url."https://${{ secrets.GITHUB_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/miniapp:latest  # Укажите свой образ

      # 2. Добавление SSH-ключа
      - name: Add SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}

      # 3. Подготовка known_hosts
      - name: Prepare SSH config
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          ssh-keygen -R "${{ secrets.SERVER_IP }}"
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      # 4. Тест подключения по SSH
      - name: Test SSH connection
        run: ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "echo SSH connection successful"

      # 5. Деплой на сервер
      - name: Deploy to Server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/miniapp:latest && \
          docker stop my-app || true && \
          docker rm my-app || true && \
          docker run -d --name my-app -p 80:80 -e TELEGRAM_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} ${{ secrets.DOCKERHUB_USERNAME }}/miniapp:latest
          '

  pages:
    runs-on: ubuntu-latest
    needs: deploy  # Этот job будет запущен после job deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy index.html to public folder
        run: |
          mkdir -p public
          cp index.html public/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
