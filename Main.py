import logging
import aiohttp
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from googletrans import Translator  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É googletrans –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_language = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def choose_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("üá¨üáß English", callback_data='lang_en')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:', reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'lang_ru':
        user_language[query.from_user.id] = 'ru'
        await query.edit_message_text('–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.')
    elif query.data == 'lang_en':
        user_language[query.from_user.id] = 'en'
        await query.edit_message_text('Language set: English. Enter the movie title.')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
def translate_text(text: str, lang: str) -> str:
    if lang == 'ru':
        translator = Translator()
        translated = translator.translate(text, src='ru', dest='en')
        return translated.text
    return text  # –ï—Å–ª–∏ —è–∑—ã–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–∞—Ö —á–µ—Ä–µ–∑ OMDb API
async def search_movies(title: str) -> dict:
    api_key = 'bf196073'
    base_url = 'http://www.omdbapi.com/'
    params = {
        'apikey': api_key,
        's': title
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(base_url, params=params) as response:
            if response.status == 200:
                return await response.json()
            else:
                return {"Error": "Failed to retrieve data"}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
async def get_movie_info(imdb_id: str) -> dict:
    api_key = 'bf196073'
    base_url = 'http://www.omdbapi.com/'
    params = {
        'apikey': api_key,
        'i': imdb_id
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(base_url, params=params) as response:
            if response.status == 200:
                return await response.json()
            else:
                return {"Error": "Failed to retrieve data"}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
async def get_movie(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    movie_title = update.message.text
    lang = user_language.get(update.message.from_user.id, 'en')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    translated_title = translate_text(movie_title, lang)

    movies_info = await search_movies(translated_title)

    if "Error" not in movies_info and movies_info.get("Search"):
        keyboard = []
        for movie in movies_info['Search']:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –Ω–∞ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–ª—Å—è
            keyboard.append(
                [InlineKeyboardButton(f"{movie['Title']} ({movie['Year']})", callback_data=movie['imdbID'])])

        reply_markup = InlineKeyboardMarkup(keyboard)
        if lang == 'ru':
            await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å —Ñ–∏–ª—å–º–∞:', reply_markup=reply_markup)
        else:
            await update.message.reply_text('Select the movie part:', reply_markup=reply_markup)
    else:
        if lang == 'ru':
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ.")
        else:
            await update.message.reply_text("Failed to find movie information.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def movie_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    movie_id = query.data
    movie_info = await get_movie_info(movie_id)
    lang = user_language.get(query.from_user.id, 'en')

    if "Error" not in movie_info:
        if lang == 'ru':
            reply_message = (
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {movie_info.get('Title')}\n"
                f"–ì–æ–¥: {movie_info.get('Year')}\n"
                f"–†–µ–∂–∏—Å—Å—ë—Ä: {movie_info.get('Director')}\n"
                f"–ñ–∞–Ω—Ä: {movie_info.get('Genre')}\n"
                f"–†–µ–π—Ç–∏–Ω–≥: {movie_info.get('imdbRating')}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {movie_info.get('Plot')}\n"
            )
        else:
            reply_message = (
                f"Title: {movie_info.get('Title')}\n"
                f"Year: {movie_info.get('Year')}\n"
                f"Director: {movie_info.get('Director')}\n"
                f"Genre: {movie_info.get('Genre')}\n"
                f"IMDb Rating: {movie_info.get('imdbRating')}\n"
                f"Plot: {movie_info.get('Plot')}\n"
            )
    else:
        reply_message = "Error retrieving movie information."

    await query.edit_message_text(reply_message)


if __name__ == '__main__':
    application = ApplicationBuilder().token('7360518240:AAEJ75gYh5IcuiS2tVWvSJfMIF35E7bf4jg').build()

    # –ö–æ–º–∞–Ω–¥–∞ /start
    application.add_handler(CommandHandler("start", choose_language))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    application.add_handler(CallbackQueryHandler(set_language, pattern="^lang_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, get_movie))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(movie_details))

    application.run_polling()
